<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.17">
    <compounddef id="bp__heap_8h" kind="file" language="C++">
        <compoundname>bp_heap.h</compoundname>
        <includes refid="bp__array_8h" local="yes">bp_array.h</includes>
        <incdepgraph>
            <node id="7">
                <label>stdbool.h</label>
            </node>
            <node id="2">
                <label>bp_array.h</label>
                <link refid="bp__array_8h"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
            </node>
            <node id="6">
                <label>errno.h</label>
            </node>
            <node id="1">
                <label>src/include/bp_heap.h</label>
                <link refid="bp__heap_8h"/>
                <childnode refid="2" relation="include">
                </childnode>
            </node>
            <node id="5">
                <label>bp_types.h</label>
                <link refid="bp__types_8h"/>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
            </node>
            <node id="3">
                <label>string.h</label>
            </node>
            <node id="4">
                <label>bp_iter.h</label>
                <link refid="bp__iter_8h"/>
                <childnode refid="5" relation="include">
                </childnode>
            </node>
        </incdepgraph>
        <innerclass refid="structbp__heap__t" prot="public">bp_heap_t</innerclass>
        <sectiondef kind="define">
            <memberdef kind="define" id="bp__heap_8h_1a8281eafd1bf64aeee89d3d330e066480" prot="public" static="no">
                <name>BP_MIN_HEAP_INIT</name>
                <param>
                    <defname>array_</defname>
                </param>
                <param>
                    <defname>cmp_</defname>
                </param>
                <initializer>{ \
                    ._coll = <ref refid="bp__array_8h_1a14c990b783d8463e39b3452afb8d00c9" kindref="member">
                        BP_ARRAY_INIT</ref>(array_), ._kind = <ref
                            refid="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fcaa35aa0ba56f155f1bb9d4ee8f3fc045b"
                            kindref="member">BP_MIN_HEAP</ref>, ._cmp = cmp_ \
                    }
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Macro to initialize a Min-Heap.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>array_</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer where the elements will be stored.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmp_</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Function to compare the heap elements.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="51" column="9" bodyfile="src/include/bp_heap.h"
                          bodystart="51" bodyend="-1"/>
            </memberdef>
            <memberdef kind="define" id="bp__heap_8h_1a80f7622891e275a07a3c8e642da44e75" prot="public" static="no">
                <name>BP_MAX_HEAP_INIT</name>
                <param>
                    <defname>array_</defname>
                </param>
                <param>
                    <defname>cmp_</defname>
                </param>
                <initializer>{ \
                    ._coll = <ref refid="bp__array_8h_1a14c990b783d8463e39b3452afb8d00c9" kindref="member">
                        BP_ARRAY_INIT</ref>(array_), ._kind = <ref
                            refid="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fcadbc9a549c66e35d1f05d0bb163763207"
                            kindref="member">BP_MAX_HEAP</ref>, ._cmp = cmp_ \
                    }
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Macro to initialize a Max-Heap.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>array_</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer where the elements will be stored.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmp_</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Function to compare the heap elements.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="61" column="9" bodyfile="src/include/bp_heap.h"
                          bodystart="61" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="enum">
            <memberdef kind="enum" id="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fc" prot="public" static="no"
                       strong="no">
                <type></type>
                <name>bp_heap_kind_t</name>
                <enumvalue id="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fcaa35aa0ba56f155f1bb9d4ee8f3fc045b"
                           prot="public">
                    <name>BP_MIN_HEAP</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                        <para>Option for Min-Heap.</para>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fcadbc9a549c66e35d1f05d0bb163763207"
                           prot="public">
                    <name>BP_MAX_HEAP</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                        <para>Option for Max-Heap.</para>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Enumerate the kinds of heap. The available options are Min-Heap or Max-Heap.</para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="30" column="14" bodyfile="src/include/bp_heap.h"
                          bodystart="30" bodyend="33"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="typedef">
            <memberdef kind="typedef" id="bp__heap_8h_1a71c75552b401fb9fee00fe36548285be" prot="public" static="no">
                <type>int(*</type>
                <definition>typedef int(* bp_heap_cmp_t) (void *left, void *right)</definition>
                <argsstring>)(void *left, void *right)</argsstring>
                <name>bp_heap_cmp_t</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Type for heap compare function. The return must be 0 for equals values, less than 0 if (&lt;=
                        0) the left is less than the right, and greater than 0 (&gt;= 0) if the left is greater than the
                        right.
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="25" column="9" bodyfile="src/include/bp_heap.h"
                          bodystart="25" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="func">
            <memberdef kind="function" id="bp__heap_8h_1ae0d205498f6ecc867abd7fcc6b7928d0" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void* bp_heap_top</definition>
                <argsstring>(bp_heap_t *heap)</argsstring>
                <name>bp_heap_top</name>
                <param>
                    <type>
                        <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                        *
                    </type>
                    <declname>heap</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get the root element of the Heap tree.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heap</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_heap.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A reference to the root element, or NULL if the heap is empty or the heap argument is
                                NULL.
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="72" column="6" declfile="src/include/bp_heap.h"
                          declline="72" declcolumn="6"/>
            </memberdef>
            <memberdef kind="function" id="bp__heap_8h_1ab8df408ea7b7dad1afbac77bff659856" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_heap_clear</definition>
                <argsstring>(bp_heap_t *heap)</argsstring>
                <name>bp_heap_clear</name>
                <param>
                    <type>
                        <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                        *
                    </type>
                    <declname>heap</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Drop all elements in the heap. After this function the heap size is zero, but the elements
                        stay in the buffer.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heap</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_heap.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="80" column="5" declfile="src/include/bp_heap.h"
                          declline="80" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__heap_8h_1aee100aca64b3ffbda109456d000645a8" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_heap_pop</definition>
                <argsstring>(bp_heap_t *heap, void *el)</argsstring>
                <name>bp_heap_pop</name>
                <param>
                    <type>
                        <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                        *
                    </type>
                    <declname>heap</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>el</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Remove the root element of the Heap tree and put it in el argument variable.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heap</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_heap.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>el</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>[out] Reference to a variable, where the removed element will be put.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno, otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="88" column="5" declfile="src/include/bp_heap.h"
                          declline="88" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__heap_8h_1acc442d8d32415c424631bdf01badd285" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_heap_push</definition>
                <argsstring>(bp_heap_t *heap, void *el)</argsstring>
                <name>bp_heap_push</name>
                <param>
                    <type>
                        <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                        *
                    </type>
                    <declname>heap</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>el</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Push an element on the Heap tree.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heap</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_heap.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>el</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the element to be pushed.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="96" column="5" declfile="src/include/bp_heap.h"
                          declline="96" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__heap_8h_1a8ff1193a48d35c92bd6549dad9d9c449" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_heap_del</definition>
                <argsstring>(bp_heap_t *heap, void *param, bool(*cmp)(void *el, void *param))</argsstring>
                <name>bp_heap_del</name>
                <param>
                    <type>
                        <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                        *
                    </type>
                    <declname>heap</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>param</declname>
                </param>
                <param>
                    <type>bool(*)(void *el, void *param)</type>
                    <declname>cmp</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Delete an array element, based at some parameter related to the element. This parameter could
                        be the element itself, or some field of its type. The match will be done based on cmp function
                        pointer. If the cmp function point argument is null, then the elements will be compared with the
                        parameter byte by byte.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heap</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_heap.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>param</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the parameter used to compare elements.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmp</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Function to compare an element with the parameter passed at argument param.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="108" column="5" declfile="src/include/bp_heap.h"
                          declline="108" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__heap_8h_1a0757954b837091a673b30da158a64f3d" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void* bp_heap_find</definition>
                <argsstring>(bp_heap_t *heap, void *param, bool(*cmp)(void *el, void *param))</argsstring>
                <name>bp_heap_find</name>
                <param>
                    <type>
                        <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                        *
                    </type>
                    <declname>heap</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>param</declname>
                </param>
                <param>
                    <type>bool(*)(void *el, void *param)</type>
                    <declname>cmp</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Find the element in the heap, based at some parameter related to the element. This parameter
                        could be the element itself, or some field of its type. The match will be done based on cmp
                        function pointer. If the cmp function point argument is null, then the elements will be compared
                        with the parameter byte by byte.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heap</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_heap.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>param</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the parameter used to compare elements.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmp</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Function to compare an element with the parameter passed at argument param.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A reference to the found element, or NULL if the element wasn&apos;t found or some
                                mandatory argument is null.
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="121" column="6" declfile="src/include/bp_heap.h"
                          declline="121" declcolumn="6"/>
            </memberdef>
            <memberdef kind="function" id="bp__heap_8h_1a71e04113d5c6e6d4aec644d7e1e41b56" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="bp__iter_8h_1ac25a2139450ad25247c3b224dab35b11" kindref="member">bp_iter_t</ref>
                </type>
                <definition>bp_iter_t bp_heap_bfs_iter</definition>
                <argsstring>(bp_heap_t *heap)</argsstring>
                <name>bp_heap_bfs_iter</name>
                <param>
                    <type>
                        <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                        *
                    </type>
                    <declname>heap</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get a iterator to walk through the bp_heap, in Breadth-First-Search (BFS) sequence.</para>
                    <para>
                        <simplesect kind="warning">
                            <para>This function doesn&apos;t check if the heap argument is null. So if this argument is
                                null, a crash will occur. That check must be done outside the function.
                            </para>
                        </simplesect>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heap</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_heap.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A new iterator instance for the bp_heap, using BFS sequence.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="132" column="11" declfile="src/include/bp_heap.h"
                          declline="132" declcolumn="11"/>
            </memberdef>
            <memberdef kind="function" id="bp__heap_8h_1a4170aa94beab51f88dc0f6d864405a27" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="bp__iter_8h_1ac25a2139450ad25247c3b224dab35b11" kindref="member">bp_iter_t</ref>
                </type>
                <definition>bp_iter_t bp_heap_dfs_iter</definition>
                <argsstring>(bp_heap_t *heap)</argsstring>
                <name>bp_heap_dfs_iter</name>
                <param>
                    <type>
                        <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                        *
                    </type>
                    <declname>heap</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get a iterator to walk through the bp_heap, in Depth-First-Search (DFS) sequence.</para>
                    <para>
                        <simplesect kind="warning">
                            <para>This function doesn&apos;t check if the heap argument is null. So if this argument is
                                null, a crash will occur. That check must be done outside the function.
                            </para>
                        </simplesect>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heap</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_heap.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A new iterator instance for the bp_heap, using DFS sequence.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_heap.h" line="143" column="11" declfile="src/include/bp_heap.h"
                          declline="143" declcolumn="11"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Specifies the heap structure. the heap could be a Min-Heap or a Max-Heap.</para>
        </briefdescription>
        <detaileddescription>
            <para>
                <simplesect kind="author">
                    <para>Matheus T. dos Santos (<ulink url="mailto:tenoriomatheus0@gmail.com">
                        tenoriomatheus0@gmail.com</ulink>)
                    </para>
                </simplesect>
                <simplesect kind="version">
                    <para>0.1.0</para>
                </simplesect>
                <simplesect kind="date">
                    <para>19/09/2021</para>
                </simplesect>
                <simplesect kind="copyright">
                    <para>Matheus T. dos Santos todos os direitos reservados (c) 2021</para>
                </simplesect>
            </para>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1"></codeline>
            <codeline lineno="11">
                <highlight class="preprocessor">#ifndef<sp/>BACKPACK_HEAP_H
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="12">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#define<sp/>BACKPACK_HEAP_H
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="13">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__cplusplus
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal"></highlight>
                <highlight class="keyword">extern</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;C&quot;</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="bp__array_8h" kindref="compound">
                    bp_array.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="25">
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal"><sp/>int<sp/>(*<ref refid="bp__heap_8h_1a71c75552b401fb9fee00fe36548285be"
                                                              kindref="member">bp_heap_cmp_t</ref>)(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*left,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*right);
                </highlight>
            </codeline>
            <codeline lineno="26">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="30">
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">enum</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="31">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fcaa35aa0ba56f155f1bb9d4ee8f3fc045b"
                         kindref="member">BP_MIN_HEAP</ref>,
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="32">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fcadbc9a549c66e35d1f05d0bb163763207"
                         kindref="member">BP_MAX_HEAP</ref>,
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="33">
                <highlight class="normal">}
                    <sp/>
                    <ref refid="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fc" kindref="member">bp_heap_kind_t</ref>;
                </highlight>
            </codeline>
            <codeline lineno="34">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="40" refid="structbp__heap__t" refkind="compound">
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="41">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                    <sp/>_coll;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="42">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__heap_8h_1a87e69e892b03e5f24d095af0755328fc" kindref="member">bp_heap_kind_t</ref>
                    <sp/>_kind;
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="43">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__heap_8h_1a71c75552b401fb9fee00fe36548285be" kindref="member">bp_heap_cmp_t</ref>
                    <sp/>_cmp;
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="44">
                <highlight class="normal">}
                    <sp/>
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>;
                </highlight>
            </codeline>
            <codeline lineno="45">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="51">
                <highlight class="preprocessor">#define<sp/>BP_MIN_HEAP_INIT(array_,<sp/>cmp_)
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="52">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="53">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>._coll<sp/>=<sp/>BP_ARRAY_INIT(array_),<sp/>._kind<sp/>=<sp/>BP_MIN_HEAP,<sp/>._cmp<sp/>=<sp/>
                    cmp_<sp/>\
                </highlight>
            </codeline>
            <codeline lineno="54">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="61">
                <highlight class="preprocessor">#define<sp/>BP_MAX_HEAP_INIT(array_,<sp/>cmp_)
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="62">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="63">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>._coll<sp/>=<sp/>BP_ARRAY_INIT(array_),<sp/>._kind<sp/>=<sp/>BP_MAX_HEAP,<sp/>._cmp<sp/>=<sp/>
                    cmp_<sp/>\
                </highlight>
            </codeline>
            <codeline lineno="64">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="65">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="72">
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*<ref refid="bp__heap_8h_1ae0d205498f6ecc867abd7fcc6b7928d0"
                                                     kindref="member">bp_heap_top</ref>(
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                    <sp/>*heap);
                </highlight>
            </codeline>
            <codeline lineno="73">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="80">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__heap_8h_1ab8df408ea7b7dad1afbac77bff659856" kindref="member">bp_heap_clear</ref>(
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                    <sp/>*heap);
                </highlight>
            </codeline>
            <codeline lineno="81">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="88">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__heap_8h_1aee100aca64b3ffbda109456d000645a8" kindref="member">bp_heap_pop</ref>(
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                    <sp/>*heap,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el);
                </highlight>
            </codeline>
            <codeline lineno="89">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="96">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__heap_8h_1acc442d8d32415c424631bdf01badd285" kindref="member">bp_heap_push</ref>(
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                    <sp/>*heap,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el);
                </highlight>
            </codeline>
            <codeline lineno="97">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="108">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__heap_8h_1a8ff1193a48d35c92bd6549dad9d9c449" kindref="member">bp_heap_del</ref>(
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                    <sp/>*heap,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*param,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>(*cmp)(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*param));
                </highlight>
            </codeline>
            <codeline lineno="109">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="121">
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*<ref refid="bp__heap_8h_1a0757954b837091a673b30da158a64f3d"
                                                     kindref="member">bp_heap_find</ref>(
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                    <sp/>*heap,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*param,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>(*cmp)(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*param));
                </highlight>
            </codeline>
            <codeline lineno="122">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="132">
                <highlight class="normal">
                    <ref refid="structbp__iter" kindref="compound">bp_iter_t</ref>
                    <sp/>
                    <ref refid="bp__heap_8h_1a71e04113d5c6e6d4aec644d7e1e41b56" kindref="member">bp_heap_bfs_iter</ref>(
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                    <sp/>*heap);
                </highlight>
            </codeline>
            <codeline lineno="133">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="143">
                <highlight class="normal">
                    <ref refid="structbp__iter" kindref="compound">bp_iter_t</ref>
                    <sp/>
                    <ref refid="bp__heap_8h_1a4170aa94beab51f88dc0f6d864405a27" kindref="member">bp_heap_dfs_iter</ref>(
                    <ref refid="structbp__heap__t" kindref="compound">bp_heap_t</ref>
                    <sp/>*heap);
                </highlight>
            </codeline>
            <codeline lineno="144">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="145">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__cplusplus
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="146">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="147">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="148">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="149">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif
                    <sp/>
                    <sp/>//<sp/>BACKPACK_HEAP_H
                </highlight>
            </codeline>
        </programlisting>
        <location file="src/include/bp_heap.h"/>
    </compounddef>
</doxygen>
