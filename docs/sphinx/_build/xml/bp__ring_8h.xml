<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.17">
    <compounddef id="bp__ring_8h" kind="file" language="C++">
        <compoundname>bp_ring.h</compoundname>
        <includes local="no">string.h</includes>
        <includes refid="bp__iter_8h" local="yes">bp_iter.h</includes>
        <includes refid="bp__types_8h" local="yes">bp_types.h</includes>
        <incdepgraph>
            <node id="6">
                <label>stdbool.h</label>
            </node>
            <node id="1">
                <label>src/include/bp_ring.h</label>
                <link refid="bp__ring_8h"/>
                <childnode refid="2" relation="include">
                </childnode>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
            </node>
            <node id="5">
                <label>errno.h</label>
            </node>
            <node id="4">
                <label>bp_types.h</label>
                <link refid="bp__types_8h"/>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
            </node>
            <node id="2">
                <label>string.h</label>
            </node>
            <node id="3">
                <label>bp_iter.h</label>
                <link refid="bp__iter_8h"/>
                <childnode refid="4" relation="include">
                </childnode>
            </node>
        </incdepgraph>
        <innerclass refid="structbp__ring__t" prot="public">bp_ring_t</innerclass>
        <sectiondef kind="define">
            <memberdef kind="define" id="bp__ring_8h_1a5896f18f2b6c2851c0aa37e11946c202" prot="public" static="no">
                <name>BP_RING_INVALID_INDEX</name>
                <initializer>0xffFFffFF</initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Value representing an invalid index</para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="27" column="9" bodyfile="src/include/bp_ring.h"
                          bodystart="27" bodyend="-1"/>
            </memberdef>
            <memberdef kind="define" id="bp__ring_8h_1abaad1cae3438c252ba69de8a2716087a" prot="public" static="no">
                <name>BP_RING_INIT</name>
                <param>
                    <defname>array_</defname>
                </param>
                <initializer>{ \
                    ._array = (<ref refid="bp__types_8h_1ae081489b4906f65a3cb18e9fbe9f8d23" kindref="member">u8_t</ref> *)
                    (array_), ._element_size = sizeof((array_)[0]), \
                    ._max_size = sizeof(array_) / sizeof((array_)[0]), ._size = 0, ._head = 0, \
                    ._tail = 0, \
                    }
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Macro to initialize a bp_ring
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>array_</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer where the elements will be stored.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="33" column="9" bodyfile="src/include/bp_ring.h"
                          bodystart="33" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="func">
            <memberdef kind="function" id="bp__ring_8h_1a6c1132c0368d52accfb47d2bfb999039" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void* bp_ring_get</definition>
                <argsstring>(bp_ring_t *ring, usize idx)</argsstring>
                <name>bp_ring_get</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <param>
                    <type>
                        <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    </type>
                    <declname>idx</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get an element from the ring buffer, based on its position.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>idx</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Element index.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A reference to the desired element, or NULL if the index is out of range or the ring
                                argument is NULL.
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="59" column="6" declfile="src/include/bp_ring.h"
                          declline="59" declcolumn="6"/>
            </memberdef>
            <memberdef kind="function" id="bp__ring_8h_1ac8dcad7fb9852806e9bbae72fb68e0c7" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void* bp_ring_peek</definition>
                <argsstring>(bp_ring_t *ring)</argsstring>
                <name>bp_ring_peek</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get the oldest element (at tail) in the ring buffer.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A reference to the oldest element, or NULL if the ring argument is NULL.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="66" column="6" declfile="src/include/bp_ring.h"
                          declline="66" declcolumn="6"/>
            </memberdef>
            <memberdef kind="function" id="bp__ring_8h_1ad5455daeb6a66383bed0090e49f18599" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_ring_pop</definition>
                <argsstring>(bp_ring_t *ring, void *el)</argsstring>
                <name>bp_ring_pop</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>el</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Remove the oldest element (at tail) of the ring buffer and put it in el argument variable.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>el</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>[out] Reference to a variable where the removed element will be put.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="75" column="5" declfile="src/include/bp_ring.h"
                          declline="75" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__ring_8h_1a815e7e9af40f4c69a2aa3306ca8e0998" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_ring_push</definition>
                <argsstring>(bp_ring_t *ring, void *el)</argsstring>
                <name>bp_ring_push</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>el</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Push an element at the end (at head) of ring buffer.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>el</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the element to be pushed.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="83" column="5" declfile="src/include/bp_ring.h"
                          declline="83" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__ring_8h_1a25d5aa6c16fbb026ae76d498a486eba2" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                </type>
                <definition>usize bp_ring_find_idx</definition>
                <argsstring>(bp_ring_t *ring, void *param, bool(*cmp)(void *el, void *param))</argsstring>
                <name>bp_ring_find_idx</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>param</declname>
                </param>
                <param>
                    <type>bool(*)(void *el, void *param)</type>
                    <declname>cmp</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Find the index of an element, based at some parameter related to the element. This parameter
                        could be the element itself, or some field of its type. The match will be done based on cmp
                        function pointer. If the cmp function pointer argument is null, then the elements will be
                        compared with the parameter byte by byte.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>param</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the parameter used to compare elements.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmp</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Function to compare an element with the parameter passed at argument param.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The index of found element, or BP_RING_INVALID_INDEX if the element wasn&apos;t found
                                or some mandatory argument is null.
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="96" column="7" declfile="src/include/bp_ring.h"
                          declline="96" declcolumn="7"/>
            </memberdef>
            <memberdef kind="function" id="bp__ring_8h_1a64d51bccc18709b974a0649e827c8fd7" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void* bp_ring_find</definition>
                <argsstring>(bp_ring_t *ring, void *param, bool(*cmp)(void *el, void *param))</argsstring>
                <name>bp_ring_find</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>param</declname>
                </param>
                <param>
                    <type>bool(*)(void *el, void *param)</type>
                    <declname>cmp</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Find the element in the ring buffer, based at some parameter related to the element. This
                        parameter could be the element itself, or some field of its type. The match will be done based
                        on cmp function pointer. If the cmp function point argument is null, then the elements will be
                        compared with the parameter byte by byte.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>param</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the parameter used to compare elements.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmp</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Function to compare an element with the parameter passed at argument param.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A reference to the found element, or NULL if the element wasn&apos;t found or some
                                mandatory argument is null.
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="109" column="6" declfile="src/include/bp_ring.h"
                          declline="109" declcolumn="6"/>
            </memberdef>
            <memberdef kind="function" id="bp__ring_8h_1ae470ae789cb3bc0f95a0e60c941f4d23" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_ring_clear</definition>
                <argsstring>(bp_ring_t *ring)</argsstring>
                <name>bp_ring_clear</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Drop all elements in the ring buffer. After this function the ring buffer size is zero, but
                        the elements stay in the buffer.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="117" column="5" declfile="src/include/bp_ring.h"
                          declline="117" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__ring_8h_1a51927eb022ba57ef0b845885fd7b21ce" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                </type>
                <definition>usize bp_ring_size</definition>
                <argsstring>(bp_ring_t *ring)</argsstring>
                <name>bp_ring_size</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get the ring buffer size.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The size of ring buffer. Always return 0 if the argument ring is null.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="124" column="7" declfile="src/include/bp_ring.h"
                          declline="124" declcolumn="7"/>
            </memberdef>
            <memberdef kind="function" id="bp__ring_8h_1af3ea99f7f141e4536dbf42afa836ca66" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="bp__iter_8h_1ac25a2139450ad25247c3b224dab35b11" kindref="member">bp_iter_t</ref>
                </type>
                <definition>bp_iter_t bp_ring_iter</definition>
                <argsstring>(bp_ring_t *ring)</argsstring>
                <name>bp_ring_iter</name>
                <param>
                    <type>
                        <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                        *
                    </type>
                    <declname>ring</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get a iterator to walk through the bp_ring.</para>
                    <para>
                        <simplesect kind="warning">
                            <para>This function doesn&apos;t check if the ring argument is null. So if this argument is
                                null, a crash will occur. That check must be done outside the function.
                            </para>
                        </simplesect>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ring</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to bp_ring.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A new iterator instance for the bp_ring.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_ring.h" line="135" column="11" declfile="src/include/bp_ring.h"
                          declline="135" declcolumn="11"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Specifies the ring structure. This structure works as a circular buffer. When the buffer is in its
                maximum capacity, and a new element need be pushed into the buffer, the oldest element is replaced by
                the new element.
            </para>
        </briefdescription>
        <detaileddescription>
            <para>
                <simplesect kind="author">
                    <para>Matheus T. dos Santos (<ulink url="mailto:tenoriomatheus0@gmail.com">
                        tenoriomatheus0@gmail.com</ulink>)
                    </para>
                </simplesect>
                <simplesect kind="version">
                    <para>0.1.0</para>
                </simplesect>
                <simplesect kind="date">
                    <para>19/09/2021</para>
                </simplesect>
                <simplesect kind="copyright">
                    <para>Matheus T. dos Santos todos os direitos reservados (c) 2021</para>
                </simplesect>
            </para>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1"></codeline>
            <codeline lineno="13">
                <highlight class="preprocessor">#ifndef<sp/>BACKPACK_RING_H
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#define<sp/>BACKPACK_RING_H
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__cplusplus
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
                <highlight class="keyword">extern</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;C&quot;</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;string.h&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="bp__iter_8h" kindref="compound">
                    bp_iter.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="22">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="bp__types_8h" kindref="compound">
                    bp_types.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="23">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="27">
                <highlight class="preprocessor">#define<sp/>BP_RING_INVALID_INDEX<sp/>0xffFFffFF
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="28">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="33">
                <highlight class="preprocessor">#define<sp/>BP_RING_INIT(array_)
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="34">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="35">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>._array<sp/>=<sp/>(u8_t<sp/>*)<sp/>(array_),<sp/>._element_size<sp/>=<sp/>sizeof((array_)[0]),
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="36">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>._max_size<sp/>=<sp/>sizeof(array_)<sp/>/<sp/>sizeof((array_)[0]),<sp/>._size<sp/>=<sp/>0,<sp/>
                    ._head<sp/>=<sp/>0,<sp/>\
                </highlight>
            </codeline>
            <codeline lineno="37">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>._tail<sp/>=<sp/>0,
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="38">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="39">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="43" refid="structbp__ring__t" refkind="compound">
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="44">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__types_8h_1ae081489b4906f65a3cb18e9fbe9f8d23" kindref="member">u8_t</ref>
                    <sp/>*_array;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="45">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>_element_size;
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="46">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>_max_size;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="47">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>_size;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="48">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>_head;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="49">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>_tail;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="50">
                <highlight class="normal">}
                    <sp/>
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>;
                </highlight>
            </codeline>
            <codeline lineno="51">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="59">
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*<ref refid="bp__ring_8h_1a6c1132c0368d52accfb47d2bfb999039"
                                                     kindref="member">bp_ring_get</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring,
                    <sp/>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>idx);
                </highlight>
            </codeline>
            <codeline lineno="60">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="66">
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*<ref refid="bp__ring_8h_1ac8dcad7fb9852806e9bbae72fb68e0c7"
                                                     kindref="member">bp_ring_peek</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring);
                </highlight>
            </codeline>
            <codeline lineno="67">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="75">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__ring_8h_1ad5455daeb6a66383bed0090e49f18599" kindref="member">bp_ring_pop</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el);
                </highlight>
            </codeline>
            <codeline lineno="76">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="83">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__ring_8h_1a815e7e9af40f4c69a2aa3306ca8e0998" kindref="member">bp_ring_push</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el);
                </highlight>
            </codeline>
            <codeline lineno="84">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="96">
                <highlight class="normal">
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>
                    <ref refid="bp__ring_8h_1a25d5aa6c16fbb026ae76d498a486eba2" kindref="member">bp_ring_find_idx</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*param,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>(*cmp)(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*param));
                </highlight>
            </codeline>
            <codeline lineno="97">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="109">
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*<ref refid="bp__ring_8h_1a64d51bccc18709b974a0649e827c8fd7"
                                                     kindref="member">bp_ring_find</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*param,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>(*cmp)(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*param));
                </highlight>
            </codeline>
            <codeline lineno="110">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="117">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__ring_8h_1ae470ae789cb3bc0f95a0e60c941f4d23" kindref="member">bp_ring_clear</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring);
                </highlight>
            </codeline>
            <codeline lineno="118">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="124">
                <highlight class="normal">
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>
                    <ref refid="bp__ring_8h_1a51927eb022ba57ef0b845885fd7b21ce" kindref="member">bp_ring_size</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring);
                </highlight>
            </codeline>
            <codeline lineno="125">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="135">
                <highlight class="normal">
                    <ref refid="structbp__iter" kindref="compound">bp_iter_t</ref>
                    <sp/>
                    <ref refid="bp__ring_8h_1af3ea99f7f141e4536dbf42afa836ca66" kindref="member">bp_ring_iter</ref>(
                    <ref refid="structbp__ring__t" kindref="compound">bp_ring_t</ref>
                    <sp/>*ring);
                </highlight>
            </codeline>
            <codeline lineno="136">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="137">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__cplusplus
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="138">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="139">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="140">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="141">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif
                    <sp/>
                    <sp/>//<sp/>BACKPACK_RING_H
                </highlight>
            </codeline>
        </programlisting>
        <location file="src/include/bp_ring.h"/>
    </compounddef>
</doxygen>
