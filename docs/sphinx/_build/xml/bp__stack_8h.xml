<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.17">
    <compounddef id="bp__stack_8h" kind="file" language="C++">
        <compoundname>bp_stack.h</compoundname>
        <includes refid="bp__array_8h" local="yes">bp_array.h</includes>
        <incdepgraph>
            <node id="7">
                <label>stdbool.h</label>
            </node>
            <node id="2">
                <label>bp_array.h</label>
                <link refid="bp__array_8h"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
            </node>
            <node id="6">
                <label>errno.h</label>
            </node>
            <node id="5">
                <label>bp_types.h</label>
                <link refid="bp__types_8h"/>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
            </node>
            <node id="3">
                <label>string.h</label>
            </node>
            <node id="1">
                <label>src/include/bp_stack.h</label>
                <link refid="bp__stack_8h"/>
                <childnode refid="2" relation="include">
                </childnode>
            </node>
            <node id="4">
                <label>bp_iter.h</label>
                <link refid="bp__iter_8h"/>
                <childnode refid="5" relation="include">
                </childnode>
            </node>
        </incdepgraph>
        <sectiondef kind="func">
            <memberdef kind="function" id="bp__stack_8h_1a0042733492ee9761a8e112c2a2ef31b0" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_stack_pop</definition>
                <argsstring>(bp_array_t *stack, void *el)</argsstring>
                <name>bp_stack_pop</name>
                <param>
                    <type>
                        <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                        *
                    </type>
                    <declname>stack</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>el</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Remove the top element in the stack and put it in el argument variable.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>stack</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the stack.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>el</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>[out] Reference to a variable, where the removed element will be put.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_stack.h" line="28" column="5" declfile="src/include/bp_stack.h"
                          declline="28" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__stack_8h_1af9922c55bc93e87e5ac79e639ecfa65e" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void* bp_stack_peek</definition>
                <argsstring>(bp_array_t *stack)</argsstring>
                <name>bp_stack_peek</name>
                <param>
                    <type>
                        <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                        *
                    </type>
                    <declname>stack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get the top element in the stack.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>stack</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the stack.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A reference to the desired element, or NULL if the stack argument is NULL.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_stack.h" line="35" column="6" declfile="src/include/bp_stack.h"
                          declline="35" declcolumn="6"/>
            </memberdef>
            <memberdef kind="function" id="bp__stack_8h_1a66e3dd3f0fa280fe8c3e67e559a0c437" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int bp_stack_push</definition>
                <argsstring>(bp_array_t *stack, void *el)</argsstring>
                <name>bp_stack_push</name>
                <param>
                    <type>
                        <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                        *
                    </type>
                    <declname>stack</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>el</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Push an element at the top of the stack.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>stack</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the stack.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>el</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the element to be pushed.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 on success, errno otherwise.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_stack.h" line="43" column="5" declfile="src/include/bp_stack.h"
                          declline="43" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="bp__stack_8h_1a99b7b38ab9fe9dcdad820692480e5bd5" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="bp__iter_8h_1ac25a2139450ad25247c3b224dab35b11" kindref="member">bp_iter_t</ref>
                </type>
                <definition>bp_iter_t bp_stack_iter</definition>
                <argsstring>(bp_array_t *stack)</argsstring>
                <name>bp_stack_iter</name>
                <param>
                    <type>
                        <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                        *
                    </type>
                    <declname>stack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Get a iterator to walk through the stack. The traversal order is from top to the bottom of the
                        stack.
                    </para>
                    <para>
                        <simplesect kind="warning">
                            <para>This function doesn&apos;t check if the stack argument is null. So if this argument is
                                null, a crash will occur. That check must be done outside the function.
                            </para>
                        </simplesect>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>stack</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to the stack.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A new iterator instance for the stack.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_stack.h" line="55" column="11" declfile="src/include/bp_stack.h"
                          declline="55" declcolumn="11"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Specifies the stack structure. This structure is a bp_array complement. To allow the bp_array works as
                stack. So the following function follow the LIFO (Last-In-First-Out) order.
            </para>
        </briefdescription>
        <detaileddescription>
            <para>
                <simplesect kind="author">
                    <para>Matheus T. dos Santos (<ulink url="mailto:tenoriomatheus0@gmail.com">
                        tenoriomatheus0@gmail.com</ulink>)
                    </para>
                </simplesect>
                <simplesect kind="version">
                    <para>0.1.0</para>
                </simplesect>
                <simplesect kind="date">
                    <para>19/09/2021</para>
                </simplesect>
                <simplesect kind="copyright">
                    <para>Matheus T. dos Santos all rights reserved (c) 2021</para>
                </simplesect>
            </para>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1"></codeline>
            <codeline lineno="13">
                <highlight class="preprocessor">#ifndef<sp/>BACKPACK_STACK_H
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#define<sp/>BACKPACK_STACK_H
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__cplusplus
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
                <highlight class="keyword">extern</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;C&quot;</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="bp__array_8h" kindref="compound">
                    bp_array.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="28">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__stack_8h_1a0042733492ee9761a8e112c2a2ef31b0" kindref="member">bp_stack_pop</ref>(
                    <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                    <sp/>*stack,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el);
                </highlight>
            </codeline>
            <codeline lineno="29">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="35">
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*<ref refid="bp__stack_8h_1af9922c55bc93e87e5ac79e639ecfa65e"
                                                     kindref="member">bp_stack_peek</ref>(
                    <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                    <sp/>*stack);
                </highlight>
            </codeline>
            <codeline lineno="36">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="43">
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="bp__stack_8h_1a66e3dd3f0fa280fe8c3e67e559a0c437" kindref="member">bp_stack_push</ref>(
                    <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                    <sp/>*stack,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*el);
                </highlight>
            </codeline>
            <codeline lineno="44">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="normal">
                    <ref refid="structbp__iter" kindref="compound">bp_iter_t</ref>
                    <sp/>
                    <ref refid="bp__stack_8h_1a99b7b38ab9fe9dcdad820692480e5bd5" kindref="member">bp_stack_iter</ref>(
                    <ref refid="structbp__array__t" kindref="compound">bp_array_t</ref>
                    <sp/>*stack);
                </highlight>
            </codeline>
            <codeline lineno="56">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="57">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__cplusplus
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="58">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="59">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="60">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="61">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif
                    <sp/>
                    <sp/>//<sp/>BACKPACK_STACK_H
                </highlight>
            </codeline>
        </programlisting>
        <location file="src/include/bp_stack.h"/>
    </compounddef>
</doxygen>
