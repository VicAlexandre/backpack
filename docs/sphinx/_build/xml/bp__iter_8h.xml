<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.17">
    <compounddef id="bp__iter_8h" kind="file" language="C++">
        <compoundname>bp_iter.h</compoundname>
        <includes refid="bp__types_8h" local="yes">bp_types.h</includes>
        <includedby refid="bp__array_8h" local="yes">src/include/bp_array.h</includedby>
        <includedby refid="bp__ring_8h" local="yes">src/include/bp_ring.h</includedby>
        <incdepgraph>
            <node id="4">
                <label>stdbool.h</label>
            </node>
            <node id="3">
                <label>errno.h</label>
            </node>
            <node id="2">
                <label>bp_types.h</label>
                <link refid="bp__types_8h"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
            </node>
            <node id="1">
                <label>src/include/bp_iter.h</label>
                <link refid="bp__iter_8h"/>
                <childnode refid="2" relation="include">
                </childnode>
            </node>
        </incdepgraph>
        <invincdepgraph>
            <node id="2">
                <label>src/include/bp_array.h</label>
                <link refid="bp__array_8h"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
            </node>
            <node id="5">
                <label>src/include/bp_ring.h</label>
                <link refid="bp__ring_8h"/>
            </node>
            <node id="3">
                <label>src/include/bp_heap.h</label>
                <link refid="bp__heap_8h"/>
            </node>
            <node id="4">
                <label>src/include/bp_stack.h</label>
                <link refid="bp__stack_8h"/>
            </node>
            <node id="1">
                <label>src/include/bp_iter.h</label>
                <link refid="bp__iter_8h"/>
                <childnode refid="2" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
            </node>
        </invincdepgraph>
        <innerclass refid="structbp__iter" prot="public">bp_iter</innerclass>
        <sectiondef kind="define">
            <memberdef kind="define" id="bp__iter_8h_1acfc1ed0fc6c0274c3526a3f4923380a1" prot="public" static="no">
                <name>BP_FOREACH</name>
                <param>
                    <defname>type</defname>
                </param>
                <param>
                    <defname>var</defname>
                </param>
                <param>
                    <defname>iter_ptr</defname>
                </param>
                <initializer>for (type *var = (type *) (iter_ptr)-&gt;init(iter_ptr); (iter_ptr)-&gt;next(iter_ptr); \
                    var = (type *) (iter_ptr)-&gt;get(iter_ptr))
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Macro to easy iterator usage in loops.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>type</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The type of variable hold by the data structure represented by the iterator.
                                        The macro use this type as pointer.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>var</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Variable name that reference the element got by the iterator through the
                                        loops. This variable is a pointer.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>inter_ptr</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reference to iterator variable.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_iter.h" line="31" column="9" bodyfile="src/include/bp_iter.h"
                          bodystart="31" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="typedef">
            <memberdef kind="typedef" id="bp__iter_8h_1ac25a2139450ad25247c3b224dab35b11" prot="public" static="no">
                <type>struct
                    <ref refid="structbp__iter" kindref="compound">bp_iter</ref>
                </type>
                <definition>typedef struct bp_iter bp_iter_t</definition>
                <argsstring></argsstring>
                <name>bp_iter_t</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>Struct with iterator metadata.</para>
                    <para>
                        <simplesect kind="note">
                            <para>The functions inside the structure need be filled up by a concrete implementation.
                            </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>The data structure represented by it&apos;s iterator is declared outside it. Only a
                                reference is stored inside it.
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="src/include/bp_iter.h" line="57" column="11"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Specifies the generic iterator structure. The iterator is a interface with 3 method. Thus, each data
                structure implements the way the iterator will walk through its elements. The user also que create
                custom iterators, for its structures, implementing the methods: init, next and get.
            </para>
        </briefdescription>
        <detaileddescription>
            <para>
                <simplesect kind="author">
                    <para>Matheus T. dos Santos (<ulink url="mailto:tenoriomatheus0@gmail.com">
                        tenoriomatheus0@gmail.com</ulink>)
                    </para>
                </simplesect>
                <simplesect kind="version">
                    <para>0.1.0</para>
                </simplesect>
                <simplesect kind="date">
                    <para>19/09/2021</para>
                </simplesect>
                <simplesect kind="copyright">
                    <para>Matheus T. dos Santos all rights reserved (c) 2021</para>
                </simplesect>
            </para>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1"></codeline>
            <codeline lineno="14">
                <highlight class="preprocessor">#ifndef<sp/>BACKPACK_ITER_H
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#define<sp/>BACKPACK_ITER_H
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__cplusplus
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal"></highlight>
                <highlight class="keyword">extern</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;C&quot;</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="bp__types_8h" kindref="compound">
                    bp_types.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="22">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="31">
                <highlight class="preprocessor">#define<sp/>BP_FOREACH(type,<sp/>var,<sp/>iter_ptr)
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>\
                </highlight>
            </codeline>
            <codeline lineno="32">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>for<sp/>(type<sp/>*var<sp/>=<sp/>(type<sp/>*)<sp/>(iter_ptr)-&gt;init(iter_ptr);<sp/>
                    (iter_ptr)-&gt;next(iter_ptr);<sp/>\
                </highlight>
            </codeline>
            <codeline lineno="33">
                <highlight class="preprocessor">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>var
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>=<sp/>(type<sp/>*)<sp/>(iter_ptr)-&gt;get(iter_ptr))
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="34">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="44" refid="structbp__iter" refkind="compound">
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="structbp__iter" kindref="compound">bp_iter</ref>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="45">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*(*init)(
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="structbp__iter" kindref="compound">bp_iter</ref>
                </highlight>
            </codeline>
            <codeline lineno="46">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>*
                </highlight>
                <highlight class="keyword">self</highlight>
                <highlight class="normal">);
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="47">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>bool<sp/>(*<ref refid="structbp__iter_1a9097e4509f72e2f17fc3611178600bed" kindref="member">
                    next</ref>)(
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="structbp__iter" kindref="compound">bp_iter</ref>
                    <sp/>*
                </highlight>
                <highlight class="keyword">self</highlight>
                <highlight class="normal">);
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="50">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*(*get)(
                </highlight>
            </codeline>
            <codeline lineno="51">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="structbp__iter" kindref="compound">bp_iter</ref>
                    <sp/>*
                </highlight>
                <highlight class="keyword">self</highlight>
                <highlight class="normal">);
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="52">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">union
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="53">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>*<ref refid="structbp__iter_1ad980faf7dd87ec77bb29fbd2036c27f9" kindref="member">el</ref>;
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="54">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="bp__types_8h_1ac182d38c0a80545f8344c0657273c16e" kindref="member">usize</ref>
                    <sp/>
                    <ref refid="structbp__iter_1a64ab381d67a071c72d5d9be74b9a3e92" kindref="member">idx</ref>;
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                    <sp/>
                    <ref refid="structbp__iter_1a28587293b10d0ebc8a2d01604421b5f6" kindref="member">current</ref>;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="56">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*<ref refid="structbp__iter_1a7ac1c680c2c9b9258c5cdaf97ac6af5a"
                                                     kindref="member">coll</ref>;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="57">
                <highlight class="normal">}
                    <sp/>
                    <ref refid="bp__iter_8h_1ac25a2139450ad25247c3b224dab35b11" kindref="member">bp_iter_t</ref>;
                </highlight>
            </codeline>
            <codeline lineno="58">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="59">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__cplusplus
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="60">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="61">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="62">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="63">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif
                    <sp/>
                    <sp/>//<sp/>BACKPACK_ITER_H
                </highlight>
            </codeline>
        </programlisting>
        <location file="src/include/bp_iter.h"/>
    </compounddef>
</doxygen>
